#!/bin/bash
### java-ssl-tools (jssl) v2.0
jssl_version="v2.0"
JVM_VERSION=$(java -version 2>&1 | head -n 1)

###############################
### Part: UX ###
###############################
set_colors() {
  if command -v tput &>/dev/null && [ -t 1 ]; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
  else
    RED=""; GREEN=""; YELLOW=""; BLUE=""; BOLD=""; RESET=""
  fi
}
set_colors

###############################
### Part: argbash generated ###
###############################
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "${RED}✖ $1${RESET}" >&2
	exit "${_ret}"
}

begins_with_short_option()
{
	local first_option all_short_options='icph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

#################################
# Part: DEFAULTS INITIALIZATION #
#################################

_positionals=()
_arg_port="443"
_arg_alias="<host>"
_arg_operation="ping"

#############################
# Part: options without arg #
#############################

print_help()
{
  printf '%s\n' "${BOLD}jssl $jssl_version${RESET}"
	printf '%s\n\n' "Install trusted certificate and check SSL handshake against java keystore."
	printf 'Usage: ${BOLD}jssl <host> <operation>${RESET} [-p|--port <arg>] [-a|--alias <arg>] [-h|--help] [-v|--version] \n'
	printf '\t%s\n' "<host>: without https:// and port, eg. google.com"
	printf '\t%s\n' "<operation>: ping, install or uninstall"
	printf '\t%s\n' "-p, --port: port (default: '443')"
	printf '\t%s\n' "-a, --alias: alias in keystore (default: '<host>')"
	printf '\t%s\n' "-l, --list: List installed certificates with jssl"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n\n' "-v, --version: Prints version"

	printf '%s\n' "${BOLD}Examples:${RESET}"
	printf '%s\n' "jssl example.com install"
	printf '%s\n\n' "jssl example.com ping"

	printf '%s\n' "Current java:"
	echo "$JVM_VERSION"
	echo "JAVA_HOME=$JAVA_HOME"
}

print_version()
{
	echo "jssl $jssl_version"
	echo "$JVM_VERSION"
	echo "JAVA_HOME $JAVA_HOME"
}

#############################
# Part: argbash parsing     #
#############################
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'."
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			-p*)
				_arg_port="${_key##-p}"
				;;
			-a|--alias)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'."
				_arg_alias="$2"
				shift
				;;
			--alias=*)
				_arg_alias="${_key##--alias=}"
				;;
			-a*)
				_arg_alias="${_key##-a}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-l|--list)
				list_installed_certs
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--version)
				print_version
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}

handle_passed_args_count()
{
	local _required_args_string="'host' 'operation'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "Missing required arguments: $_required_args_string"
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "Too many arguments provided"
}

assign_positional_args()
{
		shift "$1"
		_arg_host="$1"
		shift
		_arg_operation="$1"
}

print_and_compile_java()
{
	cat > SSLPing.java <<- EOM
import javax.net.ssl.SSLParameters;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class SSLPing {
	public static void main(String[] args) {
		if (args.length != 2) {
			System.exit(1);
		}
		try {
			SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
			SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(args[0], Integer.parseInt(args[1]));

			SSLParameters sslparams = new SSLParameters();
			sslparams.setEndpointIdentificationAlgorithm("HTTPS");
			sslsocket.setSSLParameters(sslparams);

			InputStream in = sslsocket.getInputStream();
			OutputStream out = sslsocket.getOutputStream();

			out.write(1);

			while (in.available() > 0) {
				System.out.print(in.read());
			}
		} catch (Exception exception) {
			exception.printStackTrace();
			System.exit(1);
		}
	}
}
EOM
	"$JAVA_HOME/bin/javac" SSLPing.java
}

clean_up_sslping()
{
	rm -f SSLPing.java SSLPing.class
}

################
# Part: ping   #
################
check_handshake()
{
  echo "${BLUE}Checking SSL handshake...${RESET}"
  "$JAVA_HOME/bin/javac" -version
  print_and_compile_java
  "$JAVA_HOME/bin/java" SSLPing "$_arg_host" "$_arg_port"
  if [[ $? -eq 0 ]]; then
    echo "${GREEN}✔ SSL handshake successful with $_arg_host:${_arg_port}${RESET}"
  else
    echo "${RED}✖ SSL handshake failed with $_arg_host:${_arg_port}${RESET}"
  fi
  clean_up_sslping
}

################
# Part: list   #
################
list_installed_certs()
{
  echo "${BLUE}Listing installed jssl certificates in keystore...${RESET}"
  if [[ $JVM_VERSION == *"1.8"* ]]; then
    "$JAVA_HOME/bin/keytool" -v --list \
      -keystore "$JAVA_HOME"/jre/lib/security/cacerts \
      -storepass changeit \
      | grep -E "Alias name.*jssl" -A 3
  else
    "$JAVA_HOME/bin/keytool" -v --list \
      -cacerts \
      -storepass changeit \
      | grep -E "Alias name.*jssl" -A 3
  fi
}

###################
# Part: install   #
###################
install_cert()
{
  if [[ "$_arg_alias" == "<host>" ]]; then
    _arg_alias="jssl_$_arg_host"
  fi

  echo "${BLUE}Installing cert for $JVM_VERSION${RESET}"
  echo "keytool: ${YELLOW}$JAVA_HOME/bin/keytool${RESET}"

  echo | openssl s_client -connect "$_arg_host:$_arg_port" 2>/dev/null | openssl x509 > "$_arg_alias".pem
  if [[ $? -ne 0 ]]; then
    echo "${RED}✖ Failed to fetch certificate from $_arg_host:$_arg_port${RESET}"
    rm -f "$_arg_alias".pem
    exit 1
  fi

  if [[ $JVM_VERSION == *"1.8"* ]]; then
    "$JAVA_HOME/bin/keytool" -import \
      -trustcacerts -noprompt \
      -alias "$_arg_alias" \
      -file "$_arg_alias".pem \
      -keystore "$JAVA_HOME"/jre/lib/security/cacerts \
      -keypass changeit -storepass changeit
  else
    "$JAVA_HOME/bin/keytool" -importcert -cacerts -noprompt \
      -alias "$_arg_alias" \
      -file "$_arg_alias".pem \
      -keypass changeit -storepass changeit
  fi

  if [[ $? -eq 0 ]]; then
    echo "${GREEN}✔ Certificate installed successfully${RESET}"
  else
    echo "${RED}✖ Failed to install certificate into Java keystore${RESET}"
  fi

  rm -f "$_arg_alias".pem
}

###################
# Part: uninstall #
###################
uninstall_cert()
{
  if [[ "$_arg_alias" == "<host>" ]]; then
    _arg_alias="$_arg_host"
  fi

  echo "${BLUE}Uninstalling certificate: jssl_$_arg_alias${RESET}"
  echo "keytool: ${YELLOW}$JAVA_HOME/bin/keytool${RESET}"

  if [[ $JVM_VERSION == *"1.8"* ]]; then
    "$JAVA_HOME/bin/keytool" -delete \
      -noprompt -trustcacerts \
      -alias "jssl_$_arg_alias" \
      -keystore "$JAVA_HOME"/jre/lib/security/cacerts \
      -keypass changeit -storepass changeit \
      && echo "${GREEN}✔ Certificate removed from Java keystore${RESET}" \
      || echo "${RED}✖ Failed to remove certificate${RESET}"
  else
    "$JAVA_HOME/bin/keytool" -delete -noprompt -cacerts \
      -alias "jssl_$_arg_alias" \
      -keypass changeit -storepass changeit \
      && echo "${GREEN}✔ Certificate removed from Java keystore${RESET}" \
      || echo "${RED}✖ Failed to remove certificate${RESET}"
  fi
}

################################################
##################### Main #####################
################################################

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

if [ "$_arg_operation" == "ping" ]; then
  check_handshake
elif [ "$_arg_operation" == "install" ]; then
  install_cert
elif [ "$_arg_operation" == "uninstall" ]; then
  uninstall_cert
else
  die "Unknown operation: $_arg_operation! Valid operations: ping, install, uninstall"
fi